- hosts: master
  gather_facts: false
  tasks:
   - name: configure master kubernetes
     become: true  
     command: "{{item}}" 
     with_items:
      - firewall-cmd --permanent --add-port=6443/tcp
      - firewall-cmd --permanent --add-port=2379-2380/tcp
      - firewall-cmd --permanent --add-port=10250/tcp
      - firewall-cmd --permanent --add-port=10251/tcp
      - firewall-cmd --permanent --add-port=10252/tcp
      - firewall-cmd --permanent --add-port=10255/tcp
      - firewall-cmd --reload
      
   - name: configure kudeadm
     become: true  
     command: "{{item}}" 
     with_items:
      - kubeadm config images pull
       
   - name: permit access to workers
     become: true
     command: "{{item}}"
     with_items:
      - firewall-cmd --permanent --add-rich-rule 'rule family=ipv4 source address=10.0.1.10/32 accept'
      - firewall-cmd --permanent --add-rich-rule 'rule family=ipv4 source address=10.0.1.11/32 accept'
      - firewall-cmd --reload
            
   # la ip pongo la ip por defecto de la dirección de red del inteface de docker (172.17.0.1)
   - name: access container to localhost  
     become: true
     command: "{{item}}"
     with_items:
      - firewall-cmd --zone=public --permanent --add-rich-rule 'rule family=ipv4 source address=172.17.0.1/16 accept'
      - firewall-cmd --reload
      
   # guardamos información del cluster, para saber si se puede conectar o no
   - name: Obtain cluster_info
     become: true
     command: "kubectl cluster-info dump"
     register: cluster_info
     ignore_errors: yes
        
   # definimos la red de los pods mientras pueda conectarse
   - name: install CNI and define POD net
     become: true
     command: "kubeadm init --pod-network-cidr 10.1.0.0/16"
     when: cluster_info.stderr | length > 0
     register: output_kubeadm
     
   # imprimimos la salida
   - name: debug
     debug: msg="{{output_kubeadm}}"
     
   # para que el usuario root pueda utilizar kubectl para operar el cluster 
   #- name: root access kubectl
   #  become: true
   #  ansible.builtin.shell:
   #    cmd: export KUBECONFIG=/etc/kubernetes/admin.conf
         
   - name: root access kubectl
     become: true
     command: "{{item}}"
      with_items:
      - "export KUBECONFIG=/etc/kubernetes/admin.conf"
     
   # autorizar al usuario root acceder al cluster
   - name: authorize root to cluster  
     become: true
     command: "{{item}}"
     with_items:
      - "mkdir -p /root/.kube"
      - "cp -i /etc/kubernetes/admin.conf /root/.kube/config"
      - "chown $(id -u):$(id -g) /root/.kube/config"
   
   # instalando calico
   - name: install calico  
     become: true
     command: kubectl create -f https://docs.projectcalico.org/manifests/tigera-operator.yaml
     
   # instalando calico fichero de definición
   - name: calico definition file  
     become: true
     command: wget https://docs.projectcalico.org/manifests/custom-resources.yaml
   
      
