## Rol para la configuración de kubernetes, en este caso para los workers ##

# abrimos puertos firewall
- name: open ports
  become: true  
  ansible.posix.firewalld: 
    zone: public
    permanent: yes
    port: "{{item}}"
    state: enabled
  loop:
   - 10250/tcp
   - 10255/tcp
   - 8285/udp
   - 8472/udp
   - 30000-32767/tcp

# añade masquerade firewall
- name: firewall
  become: true
  ansible.posix.firewalld:
    masquerade: yes
    state: enabled
    permanent: yes
 
# permitir accesso a workers 10.0.1.10/32, 10.0.1.11/32 y master 10.0.1.50
# la ip por defecto de la dirección de red del inteface de docker (172.17.0.1)
- name: permit access to workers and access container to localhost  
  become: true
  ansible.posix.firewalld:
    zone: public
    permanent: yes
    rich_rule: "{{item}}"
    state: enabled
  with_items:   
   - 'rule family=ipv4 source address=10.0.1.50/32 accept'
   - 'rule family=ipv4 source address=10.0.1.10/32 accept'
   - 'rule family=ipv4 source address=10.0.1.11/32 accept'
   - 'rule family=ipv4 source address=172.17.0.1/16 accept'
   - 'rule family=ipv4 source address=10.244.0.1/16 accept'
   - 'rule family=ipv4 source address=10.96.0.1/32 accept'
 
# volvemos a cargar el firewall 
- name: reload firewall
  become: true  
  shell: "firewall-cmd --reload" 
  
# mostramos que la variable guardada en el master la veo desde el worker
- name: debug token
  become: true
  debug: msg="{{hostvars['mastercp2.westeurope.cloudapp.azure.com']['token_join'].stdout}}"
     
# ejecutamos el valor que hemos registrado del join command de master en los workers 
# activamos ignore_errors, si el join ya se hubiera hecho que continúe la ejecución
- name: execute join
  become: true  
  command: "{{hostvars['mastercp2.westeurope.cloudapp.azure.com']['token_join'].stdout}}"     
  ignore_errors: yes
