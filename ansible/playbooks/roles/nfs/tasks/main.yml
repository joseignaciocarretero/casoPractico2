# Lee información del device
- name: Read device information
  become: true
  community.general.parted: device=/dev/sdc unit=MiB
  register: sdc_info
  async: 10
  poll: 2
 
# Debugamos el valor del particionamiento
- name: Debug sdc_info
  ansible.builtin.debug:
    var: sdc_info.partitions
  when:
    - sdc_info.partitions | length == 0

# Creamos partición primaria si no existen particiones
- name: Create a new primary partition
  become: true
  community.general.parted:
    device: /dev/sdc
    number: 1
    state: present
  async: 300
  poll: 5
  when: sdc_info.partitions | length == 0
  register: nfs_partition

# Creación de un volume group /dev/sdc
- name: Create volume group 
  become: true  
  community.general.lvg:
    vg: nfs-vg
    pvs: /dev/sdc1
    force: no
    state: present
  async: 10
  poll: 2
  when: nfs_partition.changed

# Creación de un volumen lógico
- name: Create a logical volume
  become: true
  community.general.lvol:
    vg: nfs-vg
    lv: nfs-lv
    size: 100%FREE
    force: no
    state: present
  async: 10
  poll: 2
  when: nfs_partition.changed

# creación de los filesystem para nfs
- name: Create xfs filesystem on nfs data partition
  become: true
  community.general.filesystem:
    fstype: xfs
    dev: /dev/nfs-vg/nfs-lv
    force: yes
  async: 300
  poll: 5
  when: nfs_partition.changed
  
# Check if mount point exists in fstab
# https://stackoverflow.com/questions/25977410/adding-an-fstab-option-using-ansible
- name: Check if /dev/nfs-vg/nfs-lv is in fstab
  become: true
  ansible.builtin.lineinfile:
    path: /etc/fstab
    backup: yes
    line: "/dev/nfs-vg/nfs-lv\t/srv/nfs\txfs\tdefaults\t0 0"
    state: present
  async: 10
  poll: 2

# Monta volumen
- name: Make sure /srv/nfs is mounted  
  become: true
  ansible.posix.mount:
    path: /srv/nfs
    src: /dev/nfs-vg/nfs-lv
    fstype: xfs
    state: mounted
  async: 10
  poll: 2

# damos acceso a /srv/nfs en el master y los workers
- name: Make sure exportfs accepts LAN
  become: true
  ansible.builtin.lineinfile:
    path: /etc/exports
    backup: yes
    line: "{{item}}"
    create: yes
    state: present
  with_items:
  - /srv/nfs {{ip_worker01}}(rw,sync,insecure,fsid=0,no_subtree_check,no_root_squash)
  - /srv/nfs {{ip_worker02}}(rw,sync,insecure,fsid=0,no_subtree_check,no_root_squash)
  - /srv/nfs {{ip_master}}(rw,sync,insecure,fsid=0,no_subtree_check,no_root_squash)
  - /srv/nfs {{ip_cidr}}(rw,sync,insecure,fsid=0,no_subtree_check,no_root_squash)
  register: exportfs
  async: 10
  poll: 2

# instalamos paquetes utilidades y herramientas 
- name: Install nfs-utils and net-tools
  become: true
  dnf:
    name: "{{item}}"
    state: latest
  with_items:
  - nfs-utils
  - net-tools

# activamos servicio nfs-server 
- name: Enable service nfs-server
  become: true
  ansible.builtin.systemd:
    name: nfs-server
    enabled: yes

# arrancamos el nfs-server
- name: Make sure a service unit is running
  become: true
  ansible.builtin.systemd:
    state: started
    name: nfs-server    

# exportfs
- name: Re-export the share
  become: true
  command: exportfs -ravs
  when: exportfs.changed
  async: 10
  poll: 2
    
# añadimos al firewall y recargamos
- name: add service to firewall (nfs, rpc-bind. mountd) and reload firewall
  become: true
  command: "{{item}}" 
  with_items:
  - firewall-cmd --permanent --add-service=nfs
  - firewall-cmd --permanent --add-service=rpc-bind
  - firewall-cmd --permanent --add-service=mountd
  - firewall-cmd --reload    

